{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../auth/auth.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nfunction RegisterComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nconst _c0 = function () {\n  return [\"/login\"];\n};\nexport class RegisterComponent {\n  constructor(formBuilder, authService) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.errorMessage = '';\n    this.registerForm = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.minLength(4)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required]),\n      confirmPassword: new FormControl('', [Validators.required]),\n      name: new FormControl('', [Validators.required])\n    });\n  }\n  checkPasswords() {\n    let pass = this.registerForm.get('password').value;\n    let confirmPass = this.registerForm.get('confirmPassword').value;\n    return pass === confirmPass;\n  }\n  onSubmit() {\n    if (this.checkPasswords()) {\n      const user = this.registerForm.value;\n      delete user['confirmPassword'];\n      this.authService.registerUser(user);\n      this.errorMessage = '';\n    } else {\n      this.errorMessage = 'Passwords do not match';\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 34,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"submit\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"name\", \"username\", \"formControlName\", \"username\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"formControlName\", \"password\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"name\", \"confirmPassword\", \"formControlName\", \"confirmPassword\"], [\"type\", \"text\", \"id\", \"name\", \"name\", \"name\", \"formControlName\", \"name\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"formControlName\", \"email\"], [\"type\", \"submit\", \"value\", \"Submit\", 3, \"disabled\"], [4, \"ngIf\"], [3, \"routerLink\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function RegisterComponent_Template_form_submit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 1);\n      i0.ɵɵtext(4, \"Username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"br\")(6, \"input\", 2)(7, \"br\");\n      i0.ɵɵelementStart(8, \"label\", 3);\n      i0.ɵɵtext(9, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"br\")(11, \"input\", 4)(12, \"br\");\n      i0.ɵɵelementStart(13, \"label\", 3);\n      i0.ɵɵtext(14, \"Repeat password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"br\")(16, \"input\", 5)(17, \"br\");\n      i0.ɵɵelementStart(18, \"label\", 3);\n      i0.ɵɵtext(19, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"br\")(21, \"input\", 6)(22, \"br\");\n      i0.ɵɵelementStart(23, \"label\", 7);\n      i0.ɵɵtext(24, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"br\")(26, \"input\", 8)(27, \"br\")(28, \"input\", 9)(29, \"br\")(30, \"br\");\n      i0.ɵɵtemplate(31, RegisterComponent_div_31_Template, 2, 1, \"div\", 10);\n      i0.ɵɵelementStart(32, \"a\", 11);\n      i0.ɵɵtext(33, \"Return to login\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(26);\n      i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(4, _c0));\n    }\n  },\n  dependencies: [i3.NgIf, i4.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SACEA,WAAW,EAEXC,SAAS,EACTC,UAAU,QACL,gBAAgB;;;;;;;;ICMnBC,2BAA0B;IAAAA,YAAgB;IAAAA,iBAAM;;;;IAAtBA,eAAgB;IAAhBA,yCAAgB;;;;;;ADG9C,OAAM,MAAOC,iBAAiB;EAI5BC,YACUC,WAAwB,EACxBC,WAAwB;IADxB,gBAAW,GAAXD,WAAW;IACX,gBAAW,GAAXC,WAAW;IAJrB,iBAAY,GAAW,EAAE;IAMvB,IAAI,CAACC,YAAY,GAAG,IAAIP,SAAS,CAAC;MAChCQ,QAAQ,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAE,CAC5BE,UAAU,CAACQ,QAAQ,EACnBR,UAAU,CAACS,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFC,KAAK,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACU,KAAK,CAAC,CAAC;MACnEC,QAAQ,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACpDI,eAAe,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC,CAAC;MAC3DK,IAAI,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACQ,QAAQ,CAAC;KAChD,CAAC;EACJ;EAEAM,cAAc;IACZ,IAAIC,IAAI,GAAG,IAAI,CAACT,YAAY,CAACU,GAAG,CAAC,UAAU,CAAE,CAACC,KAAK;IACnD,IAAIC,WAAW,GAAG,IAAI,CAACZ,YAAY,CAACU,GAAG,CAAC,iBAAiB,CAAE,CAACC,KAAK;IAEjE,OAAOF,IAAI,KAAKG,WAAW;EAC7B;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACL,cAAc,EAAE,EAAE;MACzB,MAAMM,IAAI,GAAG,IAAI,CAACd,YAAY,CAACW,KAAK;MACpC,OAAOG,IAAI,CAAC,iBAAiB,CAAC;MAE9B,IAAI,CAACf,WAAW,CAACgB,YAAY,CAACD,IAAI,CAAC;MACnC,IAAI,CAACE,YAAY,GAAG,EAAE;KACvB,MAAM;MACL,IAAI,CAACA,YAAY,GAAG,wBAAwB;;EAEhD;;AArCWpB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MChB9B1B,0BAAI;MAAAA,wBAAQ;MAAAA,iBAAK;MACjBA,+BAAuD;MAAjDA;QAAA,OAAU2B,cAAU;MAAA,EAAC;MACvB3B,gCAAsB;MAAAA,yBAAS;MAAAA,iBAAQ;MAAAA,qBAAI;MAE3CA,gCAAsB;MAAAA,yBAAS;MAAAA,iBAAQ;MAAAA,sBAAI;MAE3CA,iCAAsB;MAAAA,iCAAgB;MAAAA,iBAAQ;MAAAA,sBAAI;MAElDA,iCAAsB;MAAAA,sBAAK;MAAAA,iBAAQ;MAAAA,sBAAI;MAEvCA,iCAAmB;MAAAA,uBAAM;MAAAA,iBAAQ;MAAAA,sBAAI;MAGrCA,qEAAgD;MAChDA,8BAA6B;MAAAA,gCAAe;MAAAA,iBAAI;;;MAbxBA,eAA0B;MAA1BA,4CAA0B;MAWdA,gBAAiC;MAAjCA,mDAAiC;MAC/DA,eAAkB;MAAlBA,uCAAkB;MACrBA,eAAyB;MAAzBA,uDAAyB","names":["FormControl","FormGroup","Validators","i0","RegisterComponent","constructor","formBuilder","authService","registerForm","username","required","minLength","email","password","confirmPassword","name","checkPasswords","pass","get","value","confirmPass","onSubmit","user","registerUser","errorMessage","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Antonio Ereiz\\Desktop\\lab\\web\\src\\app\\register\\register.component.ts","C:\\Users\\Antonio Ereiz\\Desktop\\lab\\web\\src\\app\\register\\register.component.html"],"sourcesContent":["import { group } from '@angular/animations';\nimport { Component } from '@angular/core';\nimport {\n  FormControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthService } from '../auth/auth.service';\nimport { User } from '../auth/user.model';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  errorMessage: string = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService\n  ) {\n    this.registerForm = new FormGroup({\n      username: new FormControl('', [\n        Validators.required,\n        Validators.minLength(4),\n      ]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required]),\n      confirmPassword: new FormControl('', [Validators.required]),\n      name: new FormControl('', [Validators.required]),\n    });\n  }\n\n  checkPasswords() {\n    let pass = this.registerForm.get('password')!.value;\n    let confirmPass = this.registerForm.get('confirmPassword')!.value;\n\n    return pass === confirmPass;\n  }\n\n  onSubmit() {\n    if (this.checkPasswords()) {\n      const user = this.registerForm.value;\n      delete user['confirmPassword'];\n\n      this.authService.registerUser(user)\n      this.errorMessage = '';\n    } else {\n      this.errorMessage = 'Passwords do not match';\n    }\n  }\n}\n","<h1>Register</h1>\n<form (submit)=\"onSubmit()\" [formGroup]=\"registerForm\">\n    <label for=\"username\">Username:</label><br>\n    <input type=\"text\" id=\"username\" name=\"username\" formControlName=\"username\"><br>\n    <label for=\"password\">Password:</label><br>\n    <input type=\"password\" id=\"password\" name=\"password\" formControlName=\"password\"><br>\n    <label for=\"password\">Repeat password:</label><br>\n    <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" formControlName=\"confirmPassword\"><br>\n    <label for=\"password\">Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\" formControlName=\"name\"><br>\n    <label for=\"email\">Email:</label><br>\n    <input type=\"email\" id=\"email\" name=\"email\" formControlName=\"email\"><br>\n    <input type=\"submit\" value=\"Submit\" [disabled]=\"registerForm.invalid\"><br><br>\n    <div *ngIf=\"errorMessage\">{{errorMessage}}</div>\n    <a [routerLink]=\"['/login']\">Return to login</a>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}