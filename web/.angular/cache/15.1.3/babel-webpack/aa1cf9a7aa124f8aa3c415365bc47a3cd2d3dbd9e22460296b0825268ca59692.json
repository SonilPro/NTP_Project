{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst BASE_URL = environment.production ? '' : environment.api_base_url;\nexport class ApiProviderService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  addUser(user) {\n    return this.httpClient.post(BASE_URL + '/users', user);\n  }\n  getPosts() {\n    console.log(BASE_URL);\n    return this.httpClient.get(BASE_URL + '/posts').pipe(map(res => {\n      return res.posts;\n    }));\n  }\n  addPost(post) {\n    return this.httpClient.post(BASE_URL + '/posts', post);\n  }\n  editPost(post) {\n    console.log(post);\n    return this.httpClient.put(BASE_URL + '/posts', post);\n  }\n  deletePost(id) {\n    return this.httpClient.delete(BASE_URL + '/posts/' + id);\n  }\n  getUsers() {\n    return this.httpClient.get(BASE_URL + '/users').pipe(map(res => {\n      console.log(res);\n      return res.users;\n    }));\n  }\n}\nApiProviderService.ɵfac = function ApiProviderService_Factory(t) {\n  return new (t || ApiProviderService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiProviderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiProviderService,\n  factory: ApiProviderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;AAGpC,SAASC,WAAW,QAAQ,6BAA6B;;;AAEzD,MAAMC,QAAQ,GAAGD,WAAW,CAACE,UAAU,GAAG,EAAE,GAAGF,WAAW,CAACG,YAAY;AAGvE,OAAM,MAAOC,kBAAkB;EAC7BC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAAe;EAE7CC,OAAO,CAACC,IAAU;IAChB,OAAO,IAAI,CAACF,UAAU,CAACG,IAAI,CAACR,QAAQ,GAAG,QAAQ,EAAEO,IAAI,CAAC;EACxD;EAEAE,QAAQ;IACNC,OAAO,CAACC,GAAG,CAACX,QAAQ,CAAC;IACrB,OAAO,IAAI,CAACK,UAAU,CAACO,GAAG,CAACZ,QAAQ,GAAG,QAAQ,CAAC,CAACa,IAAI,CAClDf,GAAG,CAAEgB,GAAQ,IAAI;MACf,OAAOA,GAAG,CAACC,KAAK;IAClB,CAAC,CAAC,CACH;EACH;EAEAC,OAAO,CAACR,IAAU;IAChB,OAAO,IAAI,CAACH,UAAU,CAACG,IAAI,CAACR,QAAQ,GAAG,QAAQ,EAAEQ,IAAI,CAAC;EACxD;EAEAS,QAAQ,CAACT,IAAU;IACjBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjB,OAAO,IAAI,CAACH,UAAU,CAACa,GAAG,CAAClB,QAAQ,GAAG,QAAQ,EAAEQ,IAAI,CAAC;EACvD;EAEAW,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACf,UAAU,CAACgB,MAAM,CAACrB,QAAQ,GAAG,SAAS,GAAGoB,EAAE,CAAC;EAC1D;EAEAE,QAAQ;IACN,OAAO,IAAI,CAACjB,UAAU,CAACO,GAAG,CAACZ,QAAQ,GAAG,QAAQ,CAAC,CAACa,IAAI,CAClDf,GAAG,CAAEgB,GAAQ,IAAI;MACfJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;MAChB,OAAOA,GAAG,CAACS,KAAK;IAClB,CAAC,CAAC,CACH;EACH;;AApCWpB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAqB,SAAlBrB,kBAAkB;EAAAsB,YADL;AAAM","names":["map","environment","BASE_URL","production","api_base_url","ApiProviderService","constructor","httpClient","addUser","user","post","getPosts","console","log","get","pipe","res","posts","addPost","editPost","put","deletePost","id","delete","getUsers","users","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Antonio Ereiz\\Desktop\\lab\\web\\src\\app\\api-provider.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { Post } from './posts/post.model';\r\nimport { User } from './auth/user.model';\r\nimport { environment } from '../environments/environment';\r\n\r\nconst BASE_URL = environment.production ? '' : environment.api_base_url;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiProviderService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  addUser(user: User) {\r\n    return this.httpClient.post(BASE_URL + '/users', user);\r\n  }\r\n\r\n  getPosts() {\r\n    console.log(BASE_URL);\r\n    return this.httpClient.get(BASE_URL + '/posts').pipe(\r\n      map((res: any) => {\r\n        return res.posts;\r\n      })\r\n    );\r\n  }\r\n\r\n  addPost(post: Post) {\r\n    return this.httpClient.post(BASE_URL + '/posts', post);\r\n  }\r\n\r\n  editPost(post: Post) {\r\n    console.log(post);\r\n    return this.httpClient.put(BASE_URL + '/posts', post);\r\n  }\r\n\r\n  deletePost(id: number) {\r\n    return this.httpClient.delete(BASE_URL + '/posts/' + id);\r\n  }\r\n\r\n  getUsers() {\r\n    return this.httpClient.get(BASE_URL + '/users').pipe(\r\n      map((res: any) => {\r\n        console.log(res);\r\n        return res.users;\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}