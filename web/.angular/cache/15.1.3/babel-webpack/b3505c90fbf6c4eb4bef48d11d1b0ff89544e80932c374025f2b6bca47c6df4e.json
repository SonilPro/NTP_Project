{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../api-provider.service\";\nexport class AuthService {\n  constructor(router, apiProvider) {\n    this.router = router;\n    this.apiProvider = apiProvider;\n    this.user = null;\n    this.users = [];\n    this.errorEmitter = new Subject();\n    this.authChange = new Subject();\n    apiProvider.getUsers().subscribe(res => {\n      this.users = res;\n    });\n  }\n  registerUser(user) {\n    this.apiProvider.addUser(user).subscribe(res => this.router.navigate(['/login']));\n  }\n  login(credentials) {\n    this.apiProvider.getUsers().subscribe(res => {\n      this.users = res;\n      let u = this.users.find(u => u.username == credentials.username && u.password == credentials.password);\n      if (u) {\n        this.user = u;\n        localStorage.setItem('user', JSON.stringify(this.user));\n        this.authChange.next(true);\n        this.router.navigate(['/']);\n      } else {\n        this.errorEmitter.next('Wrong credentials');\n      }\n    });\n  }\n  logout() {\n    this.user = null;\n    localStorage.removeItem('user');\n    this.authChange.next(false);\n    this.router.navigate(['/login']);\n  }\n  getUser() {\n    let u = localStorage.getItem('user');\n    if (!this.user && u) this.user = JSON.parse(u);\n    return {\n      ...this.user\n    };\n  }\n  isAuthenticated() {\n    let u = localStorage.getItem('user');\n    if (!this.user && u) this.user = JSON.parse(u);\n    return this.user != null;\n  }\n  getUserNameFromId(userId) {\n    return this.users.find(user => user.id === userId)?.username ?? 'Unknown user';\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ApiProviderService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAAoBA,OAAO,QAAO,MAAM;;;;AAIxC,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,MAAe,EAAUC,WAA+B;IAAxD,WAAM,GAAND,MAAM;IAAmB,gBAAW,GAAXC,WAAW;IALhD,SAAI,GAAiB,IAAI;IACzB,UAAK,GAAW,EAAE;IAC1B,iBAAY,GAAqB,IAAIJ,OAAO,EAAU;IACtD,eAAU,GAAsB,IAAIA,OAAO,EAAW;IAGlDI,WAAW,CAACC,QAAQ,EAAE,CACjBC,SAAS,CAACC,GAAG,IAAG;MACf,IAAI,CAACC,KAAK,GAAGD,GAAG;IAClB,CAAC,CAAC;EACV;EAEAE,YAAY,CAACC,IAAU;IACrB,IAAI,CAACN,WAAW,CAACO,OAAO,CAACD,IAAI,CAAC,CAACJ,SAAS,CAACC,GAAG,IAAI,IAAI,CAACJ,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;EACnF;EAEAC,KAAK,CAACC,WAAmD;IACvD,IAAI,CAACV,WAAW,CAACC,QAAQ,EAAE,CACpBC,SAAS,CAACC,GAAG,IAAG;MACf,IAAI,CAACC,KAAK,GAAGD,GAAG;MAChB,IAAIQ,CAAC,GAAG,IAAI,CAACP,KAAK,CAACQ,IAAI,CAACD,CAAC,IAAIA,CAAC,CAACE,QAAQ,IAAEH,WAAW,CAACG,QAAQ,IAAIF,CAAC,CAACG,QAAQ,IAAEJ,WAAW,CAACI,QAAQ,CAAC;MAClG,IAAIH,CAAC,EAAE;QACL,IAAI,CAACL,IAAI,GAAGK,CAAC;QACbI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACZ,IAAI,CAAC,CAAC;QACvD,IAAI,CAACa,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC;QAC1B,IAAI,CAACrB,MAAM,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;OAC5B,MAAM;QACH,IAAI,CAACa,YAAY,CAACD,IAAI,CAAC,mBAAmB,CAAC;;IAEjD,CAAC,CAAC;EACV;EAEAE,MAAM;IACJ,IAAI,CAAChB,IAAI,GAAC,IAAI;IACdS,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACJ,UAAU,CAACC,IAAI,CAAC,KAAK,CAAC;IAC3B,IAAI,CAACrB,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAgB,OAAO;IACL,IAAIb,CAAC,GAAGI,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;IACpC,IAAI,CAAC,IAAI,CAACnB,IAAI,IAAIK,CAAC,EAAE,IAAI,CAACL,IAAI,GAACW,IAAI,CAACS,KAAK,CAACf,CAAC,CAAC;IAC5C,OAAO;MAAC,GAAG,IAAI,CAACL;IAAI,CAAS;EAC/B;EAEAqB,eAAe;IACb,IAAIhB,CAAC,GAAGI,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;IACpC,IAAI,CAAC,IAAI,CAACnB,IAAI,IAAIK,CAAC,EAAE,IAAI,CAACL,IAAI,GAACW,IAAI,CAACS,KAAK,CAACf,CAAC,CAAC;IAC5C,OAAO,IAAI,CAACL,IAAI,IAAE,IAAI;EACxB;EAEAsB,iBAAiB,CAACC,MAAc;IAC9B,OAAO,IAAI,CAACzB,KAAK,CAACQ,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACwB,EAAE,KAAKD,MAAM,CAAC,EAAEhB,QAAQ,IAAI,cAAc;EAChF;;AAvDWhB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkC,SAAXlC,WAAW;EAAAmC,YADE;AAAM","names":["Subject","AuthService","constructor","router","apiProvider","getUsers","subscribe","res","users","registerUser","user","addUser","navigate","login","credentials","u","find","username","password","localStorage","setItem","JSON","stringify","authChange","next","errorEmitter","logout","removeItem","getUser","getItem","parse","isAuthenticated","getUserNameFromId","userId","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Antonio Ereiz\\Desktop\\lab\\web\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import {EventEmitter, Injectable} from '@angular/core';\r\nimport {User} from \"./user.model\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Router} from \"@angular/router\";\r\nimport {Observable, Subject} from \"rxjs\";\r\nimport { ApiProviderService } from '../api-provider.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n\r\n  private user : User | null = null;\r\n  private users: User[] = [];\r\n  errorEmitter : Subject<string> = new Subject<string>();\r\n  authChange : Subject<boolean> = new Subject<boolean>();\r\n\r\n  constructor(private router : Router, private apiProvider: ApiProviderService) {\r\n      apiProvider.getUsers()\r\n          .subscribe(res =>{\r\n            this.users = res;\r\n          });\r\n  }\r\n\r\n  registerUser(user: User){\r\n    this.apiProvider.addUser(user).subscribe(res => this.router.navigate(['/login']));\r\n  }\r\n\r\n  login(credentials : {username : string, password: string}){\r\n    this.apiProvider.getUsers()\r\n          .subscribe(res =>{\r\n            this.users = res;\r\n            let u = this.users.find(u => u.username==credentials.username && u.password==credentials.password);\r\n            if (u) {\r\n              this.user = u;\r\n              localStorage.setItem('user', JSON.stringify(this.user));\r\n              this.authChange.next(true);\r\n              this.router.navigate(['/']);\r\n            } else {\r\n                this.errorEmitter.next('Wrong credentials');\r\n            }\r\n          });\r\n  }\r\n\r\n  logout(){\r\n    this.user=null;\r\n    localStorage.removeItem('user');\r\n    this.authChange.next(false);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getUser(){\r\n    let u = localStorage.getItem('user');\r\n    if (!this.user && u) this.user=JSON.parse(u);\r\n    return {...this.user} as User;\r\n  }\r\n\r\n  isAuthenticated(){\r\n    let u = localStorage.getItem('user');\r\n    if (!this.user && u) this.user=JSON.parse(u);\r\n    return this.user!=null;\r\n  }\r\n\r\n  getUserNameFromId(userId: string){\r\n    return this.users.find(user => user.id === userId)?.username ?? 'Unknown user';\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}