{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    console.log(this.authService.isAuthenticated());\n    if (this.authService.isAuthenticated()) return true;\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\nAuthenticationGuard.ɵfac = function AuthenticationGuard_Factory(t) {\n  return new (t || AuthenticationGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthenticationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationGuard,\n  factory: AuthenticationGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,mBAAmB;EAE5BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CACPC,IAA4B,EAC5BC,KAA0B;IAE1BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,WAAW,CAACO,eAAe,EAAE,CAAC;IAE/C,IAAI,IAAI,CAACP,WAAW,CAACO,eAAe,EAAE,EAClC,OAAO,IAAI;IAEf,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EAChB;;AAfSV,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAW,SAAnBX,mBAAmB;EAAAY,YADN;AAAM","names":["AuthenticationGuard","constructor","authService","router","canActivate","next","state","console","log","isAuthenticated","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Antonio Ereiz\\Desktop\\lab\\web\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\r\nimport {Observable} from \"rxjs\";\r\nimport { AuthService } from './auth/auth.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationGuard implements CanActivate {\r\n\r\n    constructor(private authService: AuthService, private router: Router) {}\r\n\r\n    canActivate(\r\n        next: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n\r\n        console.log(this.authService.isAuthenticated());\r\n\r\n        if (this.authService.isAuthenticated())\r\n            return true;\r\n\r\n        this.router.navigate(['/login']);\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}